function setup {
	local FIFO=$(uuidgen)
	mkfifo $FIFO
	echo "My FIFO is: $FIFO"
}

function push {
	local PID=$1
	local FIFO=$2
	local cmd=$3
	kill -SIGIO $PID
	build_json_request "$3" > "$FIFO"
}

function build_json_request {
	local PYSH_COMMAND=$1 # setting here will make it appear in payload
	local vars=( $(compgen -v) )
	# functions for building json
	function to_str {
		local str=$1
		local str=${str//\\/\\\\} # json only has 2 special
		local str=${str//\"/\\\"} # characters: " and \
		printf "\"%s\"" "$str"
	}
	function to_pair {
		local key=$1
		local val=$2
		local key=$(to_str "$key")
		local val=$(to_str "$val")
		printf "%s:%s" "$key" "$val"
	}
	function to_obj {
		local len=$1 # no way to pass distinct arrays in bash<4
		shift;		local keys=("${@:1:$len}")
		shift $len; local vals=("${@:1:$len}")
		for i in "${!keys[@]}"
		do
			local pairs[$i]=$(to_pair "${keys[$i]}" "${vals[$i]}")
		done
		local pairs=$( (IFS=,; echo "${pairs[*]}") )
		printf "{%s}" "$pairs"
	}
	function lookup {
		local name=$1
		local exp="${name}[*]" # fully expand all variables
		printf "%s" "${!exp}"
	}
	for i in ${!vars[@]}
	do
		local vals[$i]=$(lookup ${vars[$i]})
	done
	to_obj ${#vars[@]} ${vars[@]} "${vals[@]}" # no need to double quote variable names
}
