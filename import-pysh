function pysh {
	function start_session {
		PYSH_SESSION=$(uuidgen)
		echo "New session: " $PYSH_SESSION
		mkdir -p $(get_pdir)
		mkfifo $(get_fifo)
		python "pysh.py" "$PYSH_SESSION" &
		sleep 5 # to do: python should signal ready to respond. Shove PID through pipe?
		trap close_session EXIT INT TERM
	}
	function close_session {
		kill $(get_ppid)
		rm -rf $(get_pdir)
		unset PYSH_SESSION
	}
	function get_pdir {
		printf "/tmp/pysh/$PYSH_SESSION"
	}
	function get_fifo {
		printf "$(get_pdir)/PYSH_PIPE"
	}
	function get_ppid {
		pgrep -f "python pysh.py $PYSH_SESSION"
	}
	function comma_delim {
		local arr=("$@")
		(IFS=,; printf "%s" "${arr[*]}")
	}
	function to_json_str {
		local str=$1
		local str=${str//\\/\\\\} # json only has 2 special
		local str=${str//\"/\\\"} # characters: " and \
		printf "\"%s\"" "$str"
	}
	function to_json_arr {
		local arr=("$@")
		for i in "${!arr[@]}"
		do
			local arr[$i]=$(to_json_str "${arr[$i]}")
		done
		printf "[%s]" $(comma_delim "${arr[@]}")
	}
	function to_var_record {
		local name=$1
		if [[ "$(declare -p $name)" =~ "declare -a" ]] # if array
		then
			local exp=${name}[@]
		    local value=$(to_json_arr "${!exp}") # expand fully
		else
		    local value=$(to_json_str "${!name}")
		fi
		printf "%s:%s" $(to_json_str $name) "$value"
	}
	function to_json_obj {
		local records=("$@")
		printf "{%s}" $(comma_delim ${records[@]})
	}
	function record_env {
		local vars=( $(compgen -v) )
		for i in ${!vars[@]}
		do
			local records[$i]=$(to_var_record ${vars[$i]})
		done
		to_json_obj ${records[@]}
	}

	PYSH_COMMAND=$1
	[ -z $PYSH_SESSION ] && start_session
	kill -SIGIO $(get_ppid)
	record_env > $(get_fifo)
}
